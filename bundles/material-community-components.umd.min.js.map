{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://material-community-components/color-picker/color-picker.ts","ng://material-community-components/color-picker/color-picker.service.ts","ng://material-community-components/color-picker/color-picker-collection.component.ts","ng://material-community-components/color-picker/color-picker.component.ts","ng://material-community-components/color-picker/color-picker-selector.component.ts","ng://material-community-components/color-picker/color-picker.directives.ts","ng://material-community-components/color-picker/color-picker.module.ts","ng://material-community-components/scrollspy/scrollspy.service.ts","ng://material-community-components/scrollspy/scrollspy.ts","ng://material-community-components/scrollspy/scrollspy.directives.ts","ng://material-community-components/scrollspy/scrollspy.module.ts","ng://material-community-components/speed-dial/animations.ts","ng://material-community-components/speed-dial/speed-dial-actions.component.ts","ng://material-community-components/speed-dial/speed-dial.component.ts","ng://material-community-components/speed-dial/speed-dial.module.ts","ng://material-community-components/timer-picker/timer-picker.ts","ng://material-community-components/timer-picker/timer-picker.component.ts","ng://material-community-components/timer-picker/timer-picker.directives.ts","ng://material-community-components/timer-picker/timer-picker.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","call","next","value","done","__read","n","e","ar","push","error","EMPTY_COLOR","InjectionToken","USED_COLORS","coerceHexaColor","color","indexOf","isValidColor","toUpperCase","charAt","replace","match","map","v","Number","isNaN","parseInt","MccColorPickerService","emptyColor","usedColors","this","_colors","BehaviorSubject","prototype","addColor","colors","getValue","find","_color","getColors","asObservable","resetUseColors","Inject","args","Injectable","MccColorPickerCollectionComponent","changeDetectorRef","_hideEmpty","size","transparent","changeColor","EventEmitter","coerceBooleanProperty","_label","values","ngAfterContentChecked","slice","concat","Array","_getCollectionDiffSize","markForCheck","setTransparent","emit","setColor","option","ChangeDetectorRef","Input","Output","Component","selector","template","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","MccColorPickerComponent","elementRef","colorPickerService","_usedColorLabel","_reverseUsedColor","_hideHexForms","_hideTransparent","_hideUsedColors","_isOpen","_overlay","_hideButtons","_colorPickerSelectorHeight","_hideColorPickerSelector","usedSizeColors","btnCancel","btnConfirm","change","selected","clickOut","_collectionSubs","colors_1","colors_1_1","reverse","_selectedColor","height","_tmpSelectedColor","_this","pipe","__spread","ngOnInit","ngAfterContentInit","_collections","forEach","collection","subscription","subscribe","updateTmpSelectedColor","ngOnDestroy","closed","unsubscribe","_updateSelectedColor","overlay","tmpSelectedColor","toggle","backdropClick","confirmSelectedColor","cancelSelection","ElementRef","ContentChildren","MccColorPickerSelectorComponent","formBuilder","render","_height","changeSelectedColor","_rgbaColor","textClass","_isPressed","rgbKeys","el","_bc","_sc","_tmpSelectedColorSub","hexForm","get","setValue","hexCode","group","selectedColor","Validators","minLength","maxLength","rgbGroup","rgbValue","_getRGB","index","FormControl","validators","min","max","required","updateOn","rgbForm","_onChanges","ngOnChanges","changes","currentValue","_updateRGB","_updateRGBA","_blockContext","_fillGradient","rgb","Math","round","_hexValuesSub","_rgbValuesSub","ngAfterViewInit","listen","_block","nativeElement","getContext","rect","width","_strip","changeBaseColor","_stripContext","grd1","createLinearGradient","addColorStop","fillStyle","fill","fillRect","grdWhite","grdBlack","valueChanges","controls","data","hex","_getHex","toString","val","R","G","B","setStyle","offsetY","getImageData","offsetX","updateValues","_bp","FormBuilder","Renderer2","ViewChild","MccColorPickerOptionDirective","setAttribute","text","Directive","exportAs","MccColorPickerOriginDirective","renderer","event","currentTarget","isTrusted","writeValueFromKeyup","writeValue","setProperty","propagateChanges","writeValueFromColorPicker","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MccColorPickerOriginDirective_1","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","MccConnectedColorPickerDirective","colorPicker","_colorPickerSub","_attachColorPicker","_originSub","origin","detectChanges","MccColorPickerModule","forRoot","config","ngModule","MccColorPickerModule_1","useValue","empty_color","used_colors","NgModule","imports","CommonModule","PortalModule","OverlayModule","ReactiveFormsModule","MatButtonModule","MatFormFieldModule","MatInputModule","declarations","exports","ɵ0","MccScrollspyService","window","_fromClick","_scrollSub","fromEvent","debounceTime","withLatestFrom","scrollY","position","_updateFocused","items","item","focus","top","create","name","animation","g","scrollTo","id","behavior","MccScrollspyItemDirective","_id","_createId","offsetTop","_focused","focused","label","textContent","toLowerCase","MccScrollspyGroupDirective","mccScrollspyService","_name","MccScrollspyModule","ScrollingModule","ɵ0$1","SPIN_ANIMATION","trigger","state","style","transform","transition","animate","MccSpeedDialActionsComponent","_animation","_buttons","button","_elementRef","nextAnimationClass","_lastAnimationClass","removeClass","addClass","show","direction","translateFn_1","sign_1","hide","translateFn_2","sign_2","MatButton","encapsulation","ViewEncapsulation","None","MccSpeedDialComponent","_hover","_spin","_direction","openStateChange","open","hover","spin","_setActionsState","actions","undefined","previousValue","hoverStart","hoverStop","ContentChild","animations","MccSpeedDialModule","HOURS","MINUTES","MccTimerPickerComponent","_selectedHour","_selectedMinute","_selectedPeriod","_clock","_focus","_hour","_minute","_period","format","connected","getSelectedClass","findIndex","h","hour","minute","select","confirmSelectedTime","parseTimeInput","time","parsed","split","fragment","hours","isOptionDisabled","_a","minHour","minMinutes","minPeriod","_b","maxHour","maxMinutes","maxPeriod","optionValue","selectedHour","selectedPeriod","changePeriod","period","formated","MccTimerPickerOriginDirective","hasFocus","writeValueFromTimerPicker","MccTimerPickerOriginDirective_1","MccConnectedTimerPickerDirective","timerPicker","_timerPickerSub","_attachTimerPicker","_originFocus","isOpen","MccTimerPickerModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/** Contant used as empty color */\r\nexport const EMPTY_COLOR = new InjectionToken<string>('empty-color');\r\n\r\n/** Constante to set usedColorStart from the module import */\r\nexport const USED_COLORS = new InjectionToken<string[]>('used-colors');\r\n\r\n/**\r\n *\r\n */\r\nexport interface ColorPickerConfig {\r\n  empty_color?: string;\r\n  used_colors?: string[];\r\n}\r\n\r\n/**\r\n * This interface represents one color. Using this interface instead simple string\r\n * will help screen readers, because the text attribute ir set to the aria-label of\r\n * the option\r\n */\r\nexport interface MccColorPickerItem {\r\n  text: string;\r\n  value: string;\r\n}\r\n\r\nexport type MccColorPickerOption = string | MccColorPickerItem;\r\n\r\n/**\r\n * Verify if color has # as a first char. If not, add this char\r\n * to the color\r\n * @param color string\r\n */\r\nexport function coerceHexaColor(color: string): string {\r\n  if (color && color.indexOf('#') !== 0) {\r\n    color = `#${color}`;\r\n  }\r\n\r\n  if (!isValidColor(color)) {\r\n    return;\r\n  }\r\n\r\n  return color.toUpperCase();\r\n}\r\n\r\n/**\r\n * Validate if the color is valid\r\n * @param color string\r\n */\r\nexport function isValidColor(color: string): boolean {\r\n  // validate if color is an hexadecimal\r\n  if (\r\n    !color ||\r\n    color.charAt(0) !== '#' ||\r\n    color.length < 4 ||\r\n    color.length > 7\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  // validate rgb of the color\r\n  return color.replace('#', '')\r\n    .match(/.{1,2}/g)\r\n    .map(v => Number.isNaN(parseInt(v, 16)))\r\n    .indexOf(true) === -1;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { coerceHexaColor, isValidColor, EMPTY_COLOR, USED_COLORS } from './color-picker';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class MccColorPickerService {\r\n  /**\r\n   * Array of all used colors\r\n   */\r\n  private _colors: BehaviorSubject<string[]> = new BehaviorSubject<string[]>([]);\r\n\r\n  constructor(\r\n    @Inject(EMPTY_COLOR) private emptyColor: string,\r\n    @Inject(USED_COLORS) private usedColors: string[]\r\n  ) {\r\n    this._colors.next(usedColors);\r\n  }\r\n\r\n  /**\r\n   * Add new color to used colors\r\n   * @param color string\r\n   */\r\n  addColor(color: string): void {\r\n    if (!color || !isValidColor(color)) {\r\n      return;\r\n    }\r\n\r\n    color = coerceHexaColor(color) || this.emptyColor;\r\n\r\n    const colors = this._colors.getValue();\r\n    if (!colors.find(_color => _color === color)) {\r\n      colors.push(color);\r\n      this._colors.next(colors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return Observable of colors\r\n   */\r\n  getColors(): Observable<string[]> {\r\n    return this._colors.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Reset the array of used colors\r\n   */\r\n  resetUseColors(): void {\r\n    this._colors.next([]);\r\n  }\r\n}\r\n","import {\r\n  AfterContentChecked,\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  EventEmitter,\r\n  Input,\r\n  Inject,\r\n  Output,\r\n} from '@angular/core';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { EMPTY_COLOR, MccColorPickerOption } from './color-picker';\r\n\r\n@Component({\r\n  selector: 'mcc-color-picker-collection',\r\n  templateUrl: './color-picker-collection.component.html',\r\n  styleUrls: ['./color-picker-collection.component.scss'],\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MccColorPickerCollectionComponent implements AfterContentChecked {\r\n  /**\r\n   * Hide empty slots\r\n   * Empty slots are the difference between the collection size and limit\r\n   */\r\n  @Input()\r\n  set hideEmpty(value: boolean) {\r\n    this._hideEmpty = coerceBooleanProperty(value);\r\n  }\r\n  private _hideEmpty: boolean = false;\r\n\r\n  /**\r\n   * Name of the collection\r\n   */\r\n  @Input()\r\n  get label(): string {\r\n    return this._label;\r\n  }\r\n  set label(value: string) {\r\n    this._label = value;\r\n  }\r\n  private _label: string;\r\n\r\n  /**\r\n   * Array of colors to be displayed\r\n   */\r\n  @Input()\r\n  get colors(): MccColorPickerOption[] {\r\n    return this._colors;\r\n  }\r\n  set colors(values: MccColorPickerOption[]) {\r\n    this._colors = values;\r\n  }\r\n  private _colors: MccColorPickerOption[];\r\n\r\n  /**\r\n   * Size limit of the collection\r\n   */\r\n  @Input() size: number = 30;\r\n\r\n  /**\r\n   * Show transparent option\r\n   */\r\n  @Input() transparent: boolean = false;\r\n\r\n  /**\r\n   * Emit selected color value\r\n   */\r\n  @Output() changeColor: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  constructor(\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    @Inject(EMPTY_COLOR) public emptyColor: string\r\n  ) {}\r\n\r\n  ngAfterContentChecked() {\r\n    if (this._colors && this._colors.length !== this.size) {\r\n      this._colors = this._colors\r\n        .slice(0, this.size)\r\n        .concat(new Array(this._getCollectionDiffSize()));\r\n      this.changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the difference between the limit and the collection size.\r\n   * Always return 0 when hideEmpty is true\r\n   * @returns number\r\n   */\r\n  private _getCollectionDiffSize(): number {\r\n    if (this._colors.length > this.size || this._hideEmpty) {\r\n      return 0;\r\n    }\r\n\r\n    return this.size - this._colors.length;\r\n  }\r\n\r\n  /**\r\n   * Remove color\r\n   */\r\n  setTransparent(): void {\r\n    this.changeColor.emit(this.emptyColor);\r\n  }\r\n\r\n  /**\r\n   * Emit selected color value\r\n   * @param option MccColorPickerOption\r\n   */\r\n  setColor(option: MccColorPickerOption) {\r\n    const color = typeof option === 'string' ? option : option.value;\r\n    this.changeColor.emit(color);\r\n  }\r\n}\r\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EMPTY_COLOR, coerceHexaColor } from './color-picker';\r\nimport { MccColorPickerCollectionComponent } from './color-picker-collection.component';\r\nimport { MccColorPickerService } from './color-picker.service';\r\n\r\n@Component({\r\n  selector: 'mcc-color-picker',\r\n  templateUrl: './color-picker.component.html',\r\n  styleUrls: ['./color-picker.component.scss'],\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MccColorPickerComponent implements AfterContentInit, OnInit, OnDestroy {\r\n  /**\r\n   * Get all collections\r\n   */\r\n  @ContentChildren(MccColorPickerCollectionComponent)\r\n  _collections: QueryList<MccColorPickerCollectionComponent>;\r\n\r\n  /**\r\n   * Change label of the collection UsedColors\r\n   */\r\n  @Input()\r\n  get usedColorLabel(): string {\r\n    return this._usedColorLabel;\r\n  }\r\n  set usedColorLabel(value: string) {\r\n    this._usedColorLabel = value;\r\n  }\r\n  private _usedColorLabel: string = 'Used Colors';\r\n\r\n  /**\r\n   * Set initial value for used color\r\n   */\r\n  @Input()\r\n  set usedColorStart(colors: string[]) {\r\n    if (colors && colors.length > 0) {\r\n      for (const color of colors) {\r\n        this.colorPickerService.addColor(color);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set usedColor to be used in reverse\r\n   */\r\n  @Input()\r\n  set reverseUsedColors(reverse: boolean) {\r\n    this._reverseUsedColor = coerceBooleanProperty(reverse);\r\n  }\r\n  private _reverseUsedColor: boolean = false;\r\n\r\n  /**\r\n   * Hide the hexadecimal color forms.\r\n   */\r\n  @Input('hideHexForms')\r\n  get hideHexForms(): boolean {\r\n    return this._hideHexForms;\r\n  }\r\n  set hideHexForms(value: boolean) {\r\n    this._hideHexForms = value;\r\n  }\r\n  private _hideHexForms: boolean = false;\r\n\r\n  /**\r\n   * Hide empty slots from the collection UsedColors\r\n   */\r\n  @Input('hideEmptyUsedColors')\r\n  get hideEmpty(): boolean {\r\n    return this._hideEmpty;\r\n  }\r\n  set hideEmpty(value: boolean) {\r\n    this._hideEmpty = coerceBooleanProperty(value);\r\n  }\r\n  private _hideEmpty: boolean = false;\r\n\r\n  /**\r\n   * Hide transparent option of UsedColors\r\n   */\r\n  @Input('hideTransparentUsedColors')\r\n  get hideTransparent(): boolean {\r\n    return this._hideTransparent;\r\n  }\r\n  set hideTransparent(value: boolean) {\r\n    this._hideTransparent = coerceBooleanProperty(value);\r\n  }\r\n  private _hideTransparent: boolean = false;\r\n\r\n  /**\r\n   * Hide UsedColors collection\r\n   */\r\n  @Input('hideUsedColors')\r\n  get hideUsedColors(): boolean {\r\n    return this._hideUsedColors;\r\n  }\r\n  set hideUsedColors(value: boolean) {\r\n    this._hideUsedColors = coerceBooleanProperty(value);\r\n  }\r\n  private _hideUsedColors: boolean = false;\r\n\r\n  /**\r\n   * Start with a color selected\r\n   */\r\n  @Input()\r\n  get selectedColor(): string {\r\n    return this._selectedColor;\r\n  }\r\n  set selectedColor(value: string) {\r\n    if (this._selectedColor !== value) {\r\n      this.changeDetectorRef.markForCheck();\r\n    }\r\n\r\n    this._selectedColor = coerceHexaColor(value) || this.emptyColor;\r\n  }\r\n  private _selectedColor: string;\r\n\r\n  /**\r\n   * Define if the panel will be initiated open\r\n   */\r\n  @Input()\r\n  get isOpen(): boolean {\r\n    return this._isOpen;\r\n  }\r\n  set isOpen(value: boolean) {\r\n    this._isOpen = coerceBooleanProperty(value);\r\n  }\r\n  private _isOpen: boolean = false;\r\n\r\n  /**\r\n   * Define if the panel will show in overlay or not\r\n   */\r\n  @Input()\r\n  get overlay(): boolean {\r\n    return this._overlay;\r\n  }\r\n  set overlay(value: boolean) {\r\n    this._overlay = coerceBooleanProperty(value);\r\n  }\r\n  private _overlay: boolean = true;\r\n\r\n  /**\r\n   * Hide the action buttons (cancel/confirm)\r\n   */\r\n  @Input()\r\n  get hideButtons(): boolean {\r\n    return this._hideButtons;\r\n  }\r\n  set hideButtons(value: boolean) {\r\n    this._hideButtons = coerceBooleanProperty(value);\r\n  }\r\n  private _hideButtons: boolean = false;\r\n\r\n  /**\r\n   * Define new height for the selector\r\n   */\r\n  @Input()\r\n  get colorPickerSelectorHeight(): number {\r\n    return this._colorPickerSelectorHeight;\r\n  }\r\n  set colorPickerSelectorHeight(height: number) {\r\n    this._colorPickerSelectorHeight = height;\r\n  }\r\n  private _colorPickerSelectorHeight: number = 170;\r\n\r\n  /**\r\n   * Hide the color picker selector\r\n   */\r\n  @Input()\r\n  get hideColorPickerSelector(): boolean {\r\n    return this._hideColorPickerSelector;\r\n  }\r\n  set hideColorPickerSelector(value: boolean) {\r\n    this._hideColorPickerSelector = coerceBooleanProperty(value);\r\n  }\r\n  private _hideColorPickerSelector: boolean = false;\r\n\r\n  /**\r\n   * Set the size of the used colors\r\n   */\r\n  @Input() usedSizeColors: number = 30;\r\n\r\n  /**\r\n   * Change btnCancel label\r\n   */\r\n  @Input() btnCancel: string = 'Cancel';\r\n\r\n  /**\r\n   * Change btnConfirm label\r\n   */\r\n  @Input() btnConfirm: string = 'Confirm';\r\n\r\n  /**\r\n   * Event emitted when user change the selected color (without confirm)\r\n   */\r\n  @Output() change = new EventEmitter();\r\n\r\n  /**\r\n   * Event emitted when selected color is confirm\r\n   */\r\n  @Output() selected = new EventEmitter();\r\n\r\n  /**\r\n   * Event emitted when is clicked outside of the component\r\n   */\r\n  @Output() clickOut = new EventEmitter();\r\n\r\n  /**\r\n   * Return a Observable with the color the user is picking\r\n   */\r\n  get tmpSelectedColor$(): Observable<string> {\r\n    return this._tmpSelectedColor.asObservable();\r\n  }\r\n  private _tmpSelectedColor: BehaviorSubject<string>;\r\n\r\n  /**\r\n   * Observable with all the colors used by the user\r\n   */\r\n  get usedColors$(): Observable<string[]> {\r\n    return this.colorPickerService\r\n      .getColors()\r\n      .pipe(map(colors => (!this._reverseUsedColor ? colors : [...colors].reverse())));\r\n  }\r\n\r\n  /**\r\n   * Array of subscriptions from the collections\r\n   */\r\n  private _collectionSubs: Subscription[] = [];\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private colorPickerService: MccColorPickerService,\r\n    @Inject(EMPTY_COLOR) public emptyColor: string\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (!this._selectedColor) {\r\n      this._selectedColor = this.emptyColor;\r\n    }\r\n\r\n    this._tmpSelectedColor = new BehaviorSubject<string>(this._selectedColor);\r\n  }\r\n\r\n  /**\r\n   * Walk throw all collections and subcribe to changes\r\n   */\r\n  ngAfterContentInit() {\r\n    if (this._collections) {\r\n      this._collections.forEach((collection: MccColorPickerCollectionComponent) => {\r\n        const subscription = collection.changeColor.subscribe(color => {\r\n          this.updateTmpSelectedColor(color);\r\n        });\r\n\r\n        this._collectionSubs.push(subscription);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy all subscriptions\r\n   */\r\n  ngOnDestroy() {\r\n    if (this._collectionSubs) {\r\n      this._collectionSubs.forEach((subscription: Subscription) => {\r\n        if (subscription && !subscription.closed) {\r\n          subscription.unsubscribe();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update selected color and emit the change\r\n   */\r\n  private _updateSelectedColor() {\r\n    if (this._isOpen || !this.overlay) {\r\n      const tmpSelectedColor = this._tmpSelectedColor.getValue();\r\n      if (this._selectedColor !== tmpSelectedColor) {\r\n        this._selectedColor = tmpSelectedColor;\r\n        this.selected.next(this._selectedColor);\r\n      } else {\r\n        this.selected.emit(this._selectedColor);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open/close color picker panel\r\n   */\r\n  toggle() {\r\n    this._isOpen = !this._isOpen;\r\n    if (!this._isOpen && this._selectedColor !== this.emptyColor) {\r\n      this.colorPickerService.addColor(this._selectedColor);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update selected color, close the panel and notify the user\r\n   */\r\n  backdropClick(): void {\r\n    if (this._hideButtons) {\r\n      this.confirmSelectedColor();\r\n    } else {\r\n      this.cancelSelection();\r\n    }\r\n    this.clickOut.emit(null);\r\n  }\r\n\r\n  /**\r\n   * Update tmpSelectedColor\r\n   * @param color string\r\n   */\r\n  updateTmpSelectedColor(color: string) {\r\n    if (color) {\r\n      this._tmpSelectedColor.next(color);\r\n      this.change.next(color);\r\n      if (this._hideButtons) {\r\n        this._updateSelectedColor();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel the selection and close the panel\r\n   */\r\n  cancelSelection() {\r\n    this._tmpSelectedColor.next(this._selectedColor);\r\n    this.toggle();\r\n  }\r\n\r\n  /**\r\n   * Update selectedColor and close the panel\r\n   */\r\n  confirmSelectedColor() {\r\n    this._updateSelectedColor();\r\n    this.toggle();\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EMPTY_COLOR, coerceHexaColor, isValidColor } from './color-picker';\r\n\r\ninterface ColorOption {\r\n  type: string;\r\n  value: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'mcc-color-picker-selector',\r\n  templateUrl: './color-picker-selector.component.html',\r\n  styleUrls: ['./color-picker-selector.component.scss'],\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MccColorPickerSelectorComponent\r\n  implements AfterViewInit, OnInit, OnChanges, OnDestroy {\r\n  /**\r\n   * ElemenRef of the main color\r\n   */\r\n   @ViewChild('block') _block: ElementRef;\r\n\r\n  /**\r\n   * ElemenRef of the pointer main color\r\n   */\r\n  @ViewChild('blockPointer') _bp: ElementRef;\r\n\r\n  /**\r\n   * Canvas of the block\r\n   */\r\n  @ViewChild('blockCanvas')\r\n  set blockCursor(el: ElementRef) {\r\n    this._bc = el;\r\n  }\r\n  private _bc: ElementRef;\r\n  private _blockContext: any;\r\n\r\n  /**\r\n   * ElementRef of the color base\r\n   */\r\n  @ViewChild('strip') _strip: ElementRef;\r\n  // hold _strip context\r\n  private _stripContext: any;\r\n\r\n  /**\r\n   * Container of the strip\r\n   */\r\n  @ViewChild('stripContainer')\r\n  set stripCursor(el: ElementRef) {\r\n    this._sc = el;\r\n  }\r\n  private _sc: ElementRef;\r\n\r\n  /**\r\n   * Change height base of the selector\r\n   */\r\n  @Input('height')\r\n  set height(value: number) {\r\n    this._height = value;\r\n  }\r\n  get selectorHeight(): number {\r\n    return this._height;\r\n  }\r\n  get stripHeight(): number {\r\n    return this._height - 10;\r\n  }\r\n  private _height: number = 170;\r\n\r\n  /**\r\n   * Receive selected color from the component\r\n   */\r\n  @Input()\r\n  get selectedColor(): string {\r\n    return this._selectedColor;\r\n  }\r\n  set selectedColor(value: string) {\r\n    this._selectedColor = value || this.emptyColor;\r\n  }\r\n  private _selectedColor: string = '';\r\n\r\n  /**\r\n   * Hide the hexadecimal color forms.\r\n   */\r\n  @Input('hideHexForms')\r\n  get hideHexForms(): boolean {\r\n    return this._hideHexForms;\r\n  }\r\n  set hideHexForms(value: boolean) {\r\n    this._hideHexForms = value;\r\n  }\r\n  private _hideHexForms: boolean = false;\r\n\r\n  /**\r\n   * Emit update when a color is selected\r\n   */\r\n  @Output() changeSelectedColor = new EventEmitter();\r\n\r\n  /**\r\n   * RGBA current color\r\n   */\r\n  private _rgbaColor: string = 'rgba(255,0,0,1)';\r\n\r\n  /**\r\n   * Subject of the current selected color by the user\r\n   */\r\n  private _tmpSelectedColor: BehaviorSubject<string>;\r\n\r\n  /**\r\n   * Subscription of the tmpSelectedColor Observable\r\n   */\r\n  private _tmpSelectedColorSub: Subscription;\r\n\r\n  /**\r\n   * Subscription of the hexForm values change\r\n   */\r\n  private _hexValuesSub: Subscription;\r\n\r\n  /**\r\n   * Subscription of the rbgForm values change\r\n   */\r\n  private _rgbValuesSub: Subscription;\r\n\r\n  /**\r\n   * Handle color of the text\r\n   */\r\n  textClass: string = 'black';\r\n\r\n  /**\r\n   * Validate if the mouse button is pressed\r\n   */\r\n  _isPressed: boolean = false;\r\n\r\n  /**\r\n   * Form of the color in hexa\r\n   */\r\n  hexForm: FormGroup;\r\n\r\n  /**\r\n   * Form and keys of the fields in RGB\r\n   */\r\n  rgbKeys = ['R', 'G', 'B'];\r\n  rgbForm: FormGroup;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private render: Renderer2,\r\n    @Inject(EMPTY_COLOR) private emptyColor: string\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this._tmpSelectedColor = new BehaviorSubject<string>(this._selectedColor);\r\n    this._tmpSelectedColorSub = this._tmpSelectedColor.subscribe(color => {\r\n      if (color !== this._selectedColor && isValidColor(color)) {\r\n        if (this.hexForm.get('hexCode').value !== color) {\r\n          this.hexForm.setValue({ hexCode: color });\r\n        }\r\n        this.changeSelectedColor.emit(coerceHexaColor(color) || this.emptyColor);\r\n      }\r\n    });\r\n\r\n    // hex form\r\n    this.hexForm = this.formBuilder.group({\r\n      hexCode: [this.selectedColor, [Validators.minLength(7), Validators.maxLength(7)]],\r\n    });\r\n\r\n    // rgb dynamic form\r\n    const rgbGroup: any = {};\r\n    const rgbValue: number[] = this._getRGB();\r\n    this.rgbKeys.forEach(\r\n      (key, index) =>\r\n        (rgbGroup[key] = new FormControl(rgbValue[index], {\r\n          validators: [\r\n            Validators.min(0),\r\n            Validators.max(256),\r\n            Validators.required,\r\n            Validators.maxLength(3),\r\n          ],\r\n          updateOn: 'blur',\r\n        }))\r\n    );\r\n    this.rgbForm = this.formBuilder.group(rgbGroup);\r\n\r\n    // watch changes on forms\r\n    this._onChanges();\r\n  }\r\n\r\n  /**\r\n   * Update RGB, RGBA and Gradient when selectedColor change and\r\n   * the mouse button is pressed\r\n   * @param changes SimpleChanges\r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if ('selectedColor' in changes && changes['selectedColor'].currentValue !== this.emptyColor) {\r\n      if (!this._isPressed) {\r\n        this._updateRGB();\r\n        this._updateRGBA();\r\n        if (this._blockContext) {\r\n          this._fillGradient();\r\n        }\r\n      }\r\n\r\n      const rgb = this._getRGB();\r\n      const o = Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000);\r\n      this.textClass = o > 125 ? 'black' : 'white';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy all subscriptions\r\n   */\r\n  ngOnDestroy() {\r\n    if (this._tmpSelectedColorSub && !this._tmpSelectedColorSub.closed) {\r\n      this._tmpSelectedColorSub.unsubscribe();\r\n    }\r\n    if (this._hexValuesSub && !this._hexValuesSub.closed) {\r\n      this._hexValuesSub.unsubscribe();\r\n    }\r\n    if (this._rgbValuesSub && !this._rgbValuesSub.closed) {\r\n      this._rgbValuesSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.render.listen(this._block.nativeElement, 'mousedown', e => {\r\n      this._isPressed = true;\r\n      this.changeColor(e);\r\n    });\r\n    this.render.listen(this._block.nativeElement, 'mouseup', () => (this._isPressed = false));\r\n    this.render.listen(this._block.nativeElement, 'mouseout', () => (this._isPressed = false));\r\n    this.render.listen(this._block.nativeElement, 'mousemove', e => this.changeColor(e));\r\n    this._blockContext = this._bc.nativeElement.getContext('2d');\r\n    this._blockContext.rect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\r\n\r\n    this.render.listen(this._strip.nativeElement, 'mousedown', e => {\r\n      this._isPressed = true;\r\n      this.changeBaseColor(e);\r\n    });\r\n    this.render.listen(this._strip.nativeElement, 'mouseup', () => (this._isPressed = false));\r\n    this.render.listen(this._strip.nativeElement, 'mouseout', () => (this._isPressed = false));\r\n    this.render.listen(this._strip.nativeElement, 'mousemove', e => this.changeBaseColor(e));\r\n    this._stripContext = this._strip.nativeElement.getContext('2d');\r\n    this._stripContext.rect(\r\n      0,\r\n      0,\r\n      this._strip.nativeElement.width,\r\n      this._strip.nativeElement.height\r\n    );\r\n    const grd1 = this._stripContext.createLinearGradient(0, 0, 0, this._bc.nativeElement.height);\r\n    grd1.addColorStop(0, 'rgba(255, 0, 0, 1)');\r\n    grd1.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\r\n    grd1.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\r\n    grd1.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\r\n    grd1.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\r\n    grd1.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\r\n    grd1.addColorStop(1, 'rgba(255, 0, 0, 1)');\r\n    this._stripContext.fillStyle = grd1;\r\n    this._stripContext.fill();\r\n\r\n    this._fillGradient();\r\n  }\r\n\r\n  /**\r\n   * Generate colors based on the RGBA color\r\n   */\r\n  private _fillGradient(): void {\r\n    this._blockContext.fillStyle = this._rgbaColor;\r\n    this._blockContext.fillRect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\r\n\r\n    const grdWhite = this._stripContext.createLinearGradient(0, 0, this._bc.nativeElement.width, 0);\r\n    grdWhite.addColorStop(0, 'rgba(255,255,255,1)');\r\n    grdWhite.addColorStop(1, 'rgba(255,255,255,0)');\r\n    this._blockContext.fillStyle = grdWhite;\r\n    this._blockContext.fillRect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\r\n\r\n    const grdBlack = this._stripContext.createLinearGradient(\r\n      0,\r\n      0,\r\n      0,\r\n      this._bc.nativeElement.height\r\n    );\r\n    grdBlack.addColorStop(0, 'rgba(0,0,0,0)');\r\n    grdBlack.addColorStop(1, 'rgba(0,0,0,1)');\r\n    this._blockContext.fillStyle = grdBlack;\r\n    this._blockContext.fillRect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\r\n  }\r\n\r\n  /**\r\n   * Watch change on forms\r\n   */\r\n  private _onChanges() {\r\n    // validate digited code and update when digitation is finished\r\n    this._hexValuesSub = this.hexForm.get('hexCode').valueChanges\r\n      .pipe(map(color => color !== this.emptyColor ? coerceHexaColor(color) : color))\r\n      .subscribe(value => {\r\n        if (!this._isPressed && isValidColor(value)) {\r\n          this._tmpSelectedColor.next(value || this.emptyColor);\r\n        }\r\n      });\r\n\r\n    this._rgbValuesSub = this.rgbForm.valueChanges.subscribe(controls => {\r\n      const data: string[] = [];\r\n      for (const key in controls) {\r\n        if (!controls[key] && controls[key] !== 0 || controls[key] > 255) {\r\n          data.push('');\r\n          continue;\r\n        }\r\n\r\n        data.push(controls[key]);\r\n      }\r\n\r\n      const hex = this._getHex(data);\r\n      if (hex !== this._selectedColor && hex.length === 7) {\r\n        this._tmpSelectedColor.next(hex);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Convert HEX/canvas value to rgb\r\n   * @param data any\r\n   * @returns number[]\r\n   */\r\n  private _getRGB(data?: any): number[] {\r\n    if (data) {\r\n      return [data[0], data[1], data[2]];\r\n    }\r\n    const hex = this._selectedColor.replace('#', '');\r\n    const r = parseInt(hex.slice(0, 2), 16);\r\n    const g = parseInt(hex.slice(2, 4), 16);\r\n    const b = parseInt(hex.slice(4, 6), 16);\r\n\r\n    return [r, g, b];\r\n  }\r\n\r\n  /**\r\n   * Convert RGB value to HEX\r\n   * @param data any\r\n   * @returns string\r\n   */\r\n  private _getHex(data: any): string {\r\n    const hex = new Array(3);\r\n    hex[0] = data[0].toString(16);\r\n    hex[1] = data[1].toString(16);\r\n    hex[2] = data[2].toString(16);\r\n\r\n    hex.forEach((val, key) => {\r\n      if (val.length === 1) {\r\n        hex[key] = '0' + hex[key];\r\n      }\r\n    });\r\n\r\n    return coerceHexaColor(`${hex[0]}${hex[1]}${hex[2]}`) || this.emptyColor;\r\n  }\r\n\r\n  /**\r\n   * Update RGBA color\r\n   * @param data any\r\n   */\r\n  private _updateRGBA(data?: any): void {\r\n    if (!this._selectedColor && !data) {\r\n      this._rgbaColor = 'rgba(255,0,0,1)';\r\n    }\r\n\r\n    const rgb = this._getRGB(data);\r\n    this._rgbaColor = `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, 1)`;\r\n  }\r\n\r\n  /**\r\n   * Update RGB form\r\n   * @param data any\r\n   */\r\n  private _updateRGB(data?: any): void {\r\n    if (!this.rgbForm) {\r\n      return;\r\n    }\r\n\r\n    if (!data) {\r\n      data = this._getRGB();\r\n    }\r\n\r\n    this.rgbForm.setValue({ R: data[0], G: data[1], B: data[2] });\r\n  }\r\n\r\n  /**\r\n   * Get selected base color from the canvas\r\n   * @param e MouseEvent\r\n   */\r\n  private changeBaseColor(e): void {\r\n    if (this._isPressed) {\r\n      this.render.setStyle(this._sc.nativeElement, 'background-position-y', `${e.offsetY}px`);\r\n      const data = this._stripContext.getImageData(e.offsetX, e.offsetY, 1, 1).data;\r\n      this._updateRGBA(data);\r\n      this._fillGradient();\r\n      this.updateValues(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get selected color from the canvas\r\n   * @param e MouseEvent\r\n   */\r\n  private changeColor(e): void {\r\n    if (this._isPressed) {\r\n      this.render.setStyle(this._bp.nativeElement, 'top', `${e.offsetY - 5}px`);\r\n      this.render.setStyle(this._bp.nativeElement, 'left', `${e.offsetX - 5}px`);\r\n\r\n      const data = this._blockContext.getImageData(e.offsetX, e.offsetY, 1, 1).data;\r\n      this.updateValues(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit update from the selected color\r\n   * @param data any\r\n   */\r\n  private updateValues(data: any): void {\r\n    if (data) {\r\n      this._updateRGB(data);\r\n      this._tmpSelectedColor.next(this._getHex(data));\r\n    }\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Input,\r\n  Inject,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { MccColorPickerComponent } from './color-picker.component';\r\nimport { EMPTY_COLOR, coerceHexaColor, isValidColor, MccColorPickerOption } from './color-picker';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\n/**\r\n * This directive change the background of the button\r\n */\r\n@Directive({\r\n  selector: '[mccColorPickerOption], [mcc-color-picker-option]',\r\n  exportAs: 'mccColorPickerOption',\r\n})\r\nexport class MccColorPickerOptionDirective implements AfterViewInit {\r\n  /**\r\n   * Receive the color\r\n   */\r\n  @Input('mccColorPickerOption')\r\n  get color(): MccColorPickerOption {\r\n    return this._color;\r\n  }\r\n  set color(value: MccColorPickerOption) {\r\n    this._color = value;\r\n  }\r\n  private _color: MccColorPickerOption;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private render: Renderer2,\r\n    @Inject(EMPTY_COLOR) private emptyColor: string\r\n  ) {\r\n    this._color = emptyColor;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.color) {\r\n      let color: string;\r\n      if (typeof this.color === 'string') {\r\n        color = this.color;\r\n      } else {\r\n        color = this.color.value;\r\n        this.render.setAttribute(this.elementRef.nativeElement, 'aria-label', this.color.text);\r\n      }\r\n\r\n      if (isValidColor(color)) {\r\n        // apply the color\r\n        this.render.setStyle(\r\n          this.elementRef.nativeElement,\r\n          'background',\r\n          coerceHexaColor(color) || this.emptyColor\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Directive applied to an element to make it usable as an origin for an ColorPicker.\r\n */\r\n@Directive({\r\n  selector: '[mcc-color-picker-origin], [mccColorPickerOrigin]',\r\n  exportAs: 'mccColorPickerOrigin',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MccColorPickerOriginDirective),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class MccColorPickerOriginDirective implements ControlValueAccessor {\r\n  /**\r\n   * Emit changes from the origin\r\n   */\r\n  @Output() change: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  /**\r\n   * Propagate changes to angular\r\n   */\r\n  propagateChanges: (_: any) => {};\r\n\r\n  /**\r\n   * Reference to the element on which the directive is applied.\r\n   */\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Inject(EMPTY_COLOR) private emptyColor: string\r\n  ) {\r\n    // listen changes onkeyup and update color picker\r\n    renderer.listen(elementRef.nativeElement, 'keyup', (event: KeyboardEvent) => {\r\n      const value: string = event.currentTarget['value'];\r\n      if (event.isTrusted && isValidColor(value)) {\r\n        this.writeValueFromKeyup(coerceHexaColor(value) || this.emptyColor);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This method will be called by the forms API to write to the view when\r\n   * programmatic (model -> view) changes are requested.\r\n   */\r\n  writeValue(color: string) {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', color);\r\n    this.change.next(color);\r\n    if (this.propagateChanges) {\r\n      this.propagateChanges(color);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method will be called by the color picker\r\n   */\r\n  writeValueFromColorPicker(color: string) {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', color);\r\n    this.propagateChanges(color);\r\n  }\r\n\r\n  /**\r\n   * This method will be called from origin whe key is up\r\n   */\r\n  writeValueFromKeyup(color: string) {\r\n    this.change.next(color);\r\n    this.propagateChanges(color);\r\n  }\r\n\r\n  /**\r\n   * This is called by the forms API on initialization so it can update the\r\n   * form model when values propagate from the view (view -> model).\r\n   * @param fn any\r\n   */\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChanges = fn;\r\n  }\r\n\r\n  /**\r\n   * This is called by the forms API on initialization so it can update the form model on blur\r\n   * @param fn any\r\n   */\r\n  registerOnTouched(fn: any): void {}\r\n\r\n  /**\r\n   * called by the forms API when the control status changes to or from \"DISABLED\"\r\n   * @param isDisabled boolean\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n  }\r\n}\r\n\r\n/**\r\n * Directive connect an color picker with any input, select or textarea.\r\n * The color picker will be automatically updated when the value of the origin is\r\n * changed.\r\n */\r\n@Directive({\r\n  selector: '[mcc-connected-color-picker], [mccConnectedColorPicker]',\r\n  exportAs: 'mccConnectedColorPicker',\r\n})\r\nexport class MccConnectedColorPickerDirective implements AfterViewInit, OnDestroy {\r\n  /**\r\n   * Origin of the connected color picker\r\n   */\r\n  @Input('mccConnectedColorPickerOrigin') origin: MccColorPickerOriginDirective;\r\n\r\n  /**\r\n   * Color picker subscription\r\n   */\r\n  private _colorPickerSub: Subscription;\r\n\r\n  /**\r\n   * Origin subscription\r\n   */\r\n  private _originSub: Subscription;\r\n\r\n  constructor(\r\n    private colorPicker: MccColorPickerComponent,\r\n    public changeDetectorRef: ChangeDetectorRef,\r\n    @Inject(EMPTY_COLOR) private emptyColor: string\r\n  ) {}\r\n\r\n  ngAfterViewInit() {\r\n    if (!this._colorPickerSub) {\r\n      this._attachColorPicker();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._colorPickerSub && !this._colorPickerSub.closed) {\r\n      this._colorPickerSub.unsubscribe();\r\n    }\r\n    if (this._originSub && !this._originSub.closed) {\r\n      this._originSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach color picker and origin\r\n   */\r\n  private _attachColorPicker(): void {\r\n    // subscribe to origin change to update color picker\r\n    this._originSub = this.origin.change.subscribe(value => {\r\n      if (\r\n        isValidColor(value) ||\r\n        (value === this.emptyColor && this.colorPicker.selectedColor !== this.emptyColor)\r\n      ) {\r\n        this.colorPicker.updateTmpSelectedColor(value);\r\n      }\r\n      this.colorPicker.selectedColor = value;\r\n      this.changeDetectorRef.detectChanges();\r\n    });\r\n\r\n    // subscribe to color picker changes and set on origin element\r\n    this._colorPickerSub = this.colorPicker.change.subscribe(value =>\r\n      this.origin.writeValueFromColorPicker(value)\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\r\n\r\nimport { EMPTY_COLOR, USED_COLORS, ColorPickerConfig } from './color-picker';\r\n\r\nimport { MccColorPickerService } from './color-picker.service';\r\n\r\nimport { MccColorPickerComponent } from './color-picker.component';\r\nimport { MccColorPickerSelectorComponent } from './color-picker-selector.component';\r\nimport { MccColorPickerCollectionComponent } from './color-picker-collection.component';\r\nimport {\r\n  MccConnectedColorPickerDirective,\r\n  MccColorPickerOriginDirective,\r\n  MccColorPickerOptionDirective,\r\n} from './color-picker.directives';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    PortalModule,\r\n    OverlayModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n  ],\r\n  declarations: [\r\n    MccColorPickerComponent,\r\n    MccConnectedColorPickerDirective,\r\n    MccColorPickerSelectorComponent,\r\n    MccColorPickerOriginDirective,\r\n    MccColorPickerOptionDirective,\r\n    MccColorPickerCollectionComponent,\r\n  ],\r\n  exports: [\r\n    MccColorPickerComponent,\r\n    MccConnectedColorPickerDirective,\r\n    MccColorPickerOriginDirective,\r\n    MccColorPickerCollectionComponent,\r\n  ],\r\n  providers: [\r\n    MccColorPickerService,\r\n    { provide: EMPTY_COLOR, useValue: 'none' },\r\n    { provide: USED_COLORS, useValue: [] }\r\n  ],\r\n})\r\nexport class MccColorPickerModule {\r\n  /**\r\n   *\r\n   */\r\n  static forRoot(config: ColorPickerConfig): ModuleWithProviders<MccColorPickerModule> {\r\n    return {\r\n      ngModule: MccColorPickerModule,\r\n      providers: [\r\n        { provide: EMPTY_COLOR, useValue: config.empty_color || 'none' },\r\n        { provide: USED_COLORS, useValue: config.used_colors || [] }\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { Injectable, Inject, OnDestroy } from '@angular/core';\r\nimport { MccScrollspyItemDirective } from './scrollspy.directives';\r\nimport { MccScrollspyGroup, SCROLLSPY_ANIMATION_SMOOTH } from './scrollspy';\r\nimport { Subscription, Observable, BehaviorSubject, fromEvent } from 'rxjs';\r\nimport { debounceTime, withLatestFrom } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class MccScrollspyService implements OnDestroy {\r\n  /**\r\n   * When scroll is from click event, change this attr to true\r\n   * So scroll event obeservable doesn't emit any update\r\n   */\r\n  private _fromClick: boolean = false;\r\n\r\n  /**\r\n   * List of scrollspy group\r\n   */\r\n  private data: MccScrollspyGroup[] = [];\r\n\r\n  /**\r\n   * Scroll event subscription\r\n   */\r\n  private _scrollSub: Subscription;\r\n\r\n  constructor(@Inject('Window') private window: any) {\r\n    // listen to scroll event\r\n    this._scrollSub = fromEvent(window, 'scroll')\r\n      .pipe(debounceTime(50), withLatestFrom(() => window.scrollY))\r\n      .subscribe(position => {\r\n        if (!this._fromClick) {\r\n          this._updateFocused(position);\r\n        }\r\n        this._fromClick = false;\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._scrollSub && !this._scrollSub.closed) {\r\n      this._scrollSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update information about wich element is on focus\r\n   * @param position number\r\n   */\r\n  private _updateFocused(position: number): void {\r\n    this.data.forEach(group => {\r\n      const items = [];\r\n      group.items.getValue().forEach((item, index) => {\r\n        item.focus = false;\r\n        if (item.top <= position) {\r\n          if (items[index - 1]) {\r\n            items[index - 1].focus = false;\r\n          }\r\n\r\n          item.focus = true;\r\n        }\r\n\r\n        items.push(item);\r\n      });\r\n\r\n      group.items.next(items);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create new group of items\r\n   * @param name string\r\n   * @param items MccScrollspyItemDirective[]\r\n   * @param animation ScrollBehavior\r\n   */\r\n  create(\r\n    name: string,\r\n    items?: MccScrollspyItemDirective[],\r\n    animation?: ScrollBehavior\r\n  ): MccScrollspyGroup {\r\n    let group: MccScrollspyGroup = this.data.find(group => group.name === name);\r\n    if (!group) {\r\n      group = {\r\n        name: name,\r\n        animation: animation || SCROLLSPY_ANIMATION_SMOOTH,\r\n        items: new BehaviorSubject<MccScrollspyItemDirective[]>(items || []),\r\n      };\r\n\r\n      this.data.push(group);\r\n    } else {\r\n      group.items.next(items || []);\r\n    }\r\n\r\n    return group;\r\n  }\r\n\r\n  /**\r\n   * Return observable of the group\r\n   * @param name string\r\n   */\r\n  group(name: string): Observable<MccScrollspyItemDirective[]> {\r\n    let group: MccScrollspyGroup = this.data.find(g => g.name === name);\r\n    if (!group) {\r\n      group = this.create(name);\r\n    }\r\n\r\n    return group.items.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Scroll to one of the items\r\n   * @param name string\r\n   * @param id string\r\n   */\r\n  scrollTo(name: string, id: string): void {\r\n    const group: MccScrollspyGroup = this.data.find(group => group.name === name);\r\n\r\n    group.items.getValue().forEach(item => {\r\n      item.focus = false;\r\n      if (item.id === id) {\r\n        this._fromClick = true;\r\n        this._updateFocused(item.top);\r\n        window.scrollTo({ top: item.top, behavior: group.animation });\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { MccScrollspyItemDirective } from './scrollspy.directives';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n// scrollspy animations\r\nexport const SCROLLSPY_ANIMATION_SMOOTH = 'smooth';\r\nexport const SCROLLSPY_ANIMATION_INSTANT = 'instant';\r\nexport const SCROLLSPY_ANIMATION_AUTO = 'auto';\r\n\r\n/**\r\n * Scrollspy group\r\n */\r\nexport interface MccScrollspyGroup {\r\n  name: string;\r\n  animation: ScrollBehavior;\r\n  items: BehaviorSubject<MccScrollspyItemDirective[]>;\r\n}\r\n","import {\r\n  AfterContentInit,\r\n  Input,\r\n  ContentChildren,\r\n  Directive,\r\n  ElementRef,\r\n  QueryList,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { MccScrollspyService } from './scrollspy.service';\r\n\r\n@Directive({\r\n  selector: '[mccScrollspyItem], [mcc-scrollspy-item]',\r\n  exportAs: 'mccScrollspyItem',\r\n})\r\nexport class MccScrollspyItemDirective implements AfterContentInit {\r\n  /**\r\n   * Hold the element id, if element doesn't have id\r\n   * the method will create one\r\n   */\r\n  set id(id: string) {\r\n    if (!id) {\r\n      id = this._createId();\r\n      this.renderer.setProperty(this.elementRef.nativeElement, 'id', id);\r\n    }\r\n\r\n    this._id = id;\r\n  }\r\n  get id(): string {\r\n    return this._id;\r\n  }\r\n  private _id: string;\r\n\r\n  /**\r\n   * Element distance of the top\r\n   */\r\n  get top(): number {\r\n    return this.elementRef.nativeElement.offsetTop;\r\n  }\r\n\r\n  /**\r\n   * Element is focused\r\n   */\r\n  @Input('focus')\r\n  set focus(focused: boolean) {\r\n    this._focused = coerceBooleanProperty(focused);\r\n  }\r\n  get focus(): boolean {\r\n    return this._focused;\r\n  }\r\n  private _focused: boolean;\r\n\r\n  /**\r\n   * Label that will appear on the list of items.\r\n   * The default is the text inside the element\r\n   */\r\n  @Input() label: string;\r\n\r\n  constructor(public elementRef: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngAfterContentInit() {\r\n    if (!this.label) {\r\n      this.label = this.elementRef.nativeElement.textContent;\r\n    }\r\n    this.id = this.elementRef.nativeElement.id;\r\n  }\r\n\r\n  /**\r\n   * Create an ID for the element\r\n   */\r\n  private _createId(): string {\r\n    let tmpID = this.label.toLowerCase().replace(/[ ]+/gi, '_');\r\n    return `mcc_scrollspy_${tmpID}`;\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[mccScrollspyGroup], [mcc-scrollspy-group]',\r\n  exportAs: 'mccScrollspyGroup',\r\n})\r\nexport class MccScrollspyGroupDirective implements AfterContentInit {\r\n  /**\r\n   * List of scrollspy items\r\n   */\r\n  @ContentChildren(MccScrollspyItemDirective) items: QueryList<MccScrollspyItemDirective>;\r\n\r\n  /**\r\n   * Name of the scrollspy group\r\n   */\r\n  @Input('mccScrollspyGroup')\r\n  set name(name: string) {\r\n    this._name = name;\r\n  }\r\n  private _name: string;\r\n\r\n  constructor(private mccScrollspyService: MccScrollspyService) {}\r\n\r\n  ngAfterContentInit() {\r\n    // add the group items\r\n    const items = this.items.map(item => item);\r\n    this.mccScrollspyService.create(this._name, items);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\n\r\nimport { MccScrollspyService } from './scrollspy.service';\r\nimport { MccScrollspyGroupDirective, MccScrollspyItemDirective } from './scrollspy.directives';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ScrollingModule],\r\n  providers: [MccScrollspyService, { provide: 'Window', useValue: window }],\r\n  declarations: [MccScrollspyGroupDirective, MccScrollspyItemDirective],\r\n  exports: [MccScrollspyGroupDirective, MccScrollspyItemDirective],\r\n})\r\nexport class MccScrollspyModule {}\r\n","import { animate, state, style, transition, trigger } from '@angular/animations';\r\n\r\n/**\r\n * Types of animation to be executed by speed-dial-actions\r\n */\r\nexport type ANIMATION = 'fling' | 'scale';\r\n\r\n/**\r\n * Default value of action button z-index \r\n */\r\nexport const Z_INDEX = 23;\r\n\r\n/**\r\n * SPIN animation used on speed-dial\r\n */\r\nexport const SPIN_ANIMATION = trigger('spin', [\r\n  state('open', style({\r\n    transform: 'rotate(360deg)',\r\n  })),\r\n  state('closed', style({\r\n    transform: 'rotate(0deg)',\r\n  })),\r\n  transition('open => closed', [animate('.3s')]),\r\n  transition('closed => open', [animate('.3s')]),\r\n]);","import { AfterContentInit, Component, ContentChildren, Input, QueryList, Renderer2, ViewEncapsulation } from '@angular/core';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ANIMATION, Z_INDEX } from './animations';\r\nimport { DIRECTION } from './directions';\r\n\r\n@Component({\r\n  selector: 'mcc-speed-dial-actions',\r\n  templateUrl: './speed-dial-actions.component.html',\r\n  styleUrls: ['./speed-dial-actions.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MccSpeedDialActionsComponent implements AfterContentInit {\r\n  /**\r\n   * Hold all the actions button inside fab speed dial\r\n   */\r\n  @ContentChildren(MatButton) _buttons: QueryList<MatButton>;\r\n\r\n  /**\r\n   * Set type of animation will be executed on open/close\r\n   * Type available are: scale | fling\r\n   */\r\n  @Input() set animation(animation: ANIMATION) {\r\n    this._animation.next(animation);\r\n  }\r\n  private _animation: BehaviorSubject<ANIMATION> = new BehaviorSubject('scale');\r\n\r\n  /**\r\n   * Last animation the was used\r\n   */\r\n  private _lastAnimationClass: string;\r\n\r\n  constructor(private renderer: Renderer2) { }\r\n\r\n  /**\r\n   * The z-index style and animation class are handle separate because\r\n   * z-index will be set only one time, and the animation class will be set\r\n   * every time the animation change\r\n   */\r\n  ngAfterContentInit() {\r\n    // set z-index style to each button action\r\n    this._buttons.forEach((button, index) => {\r\n      this.renderer.setStyle(button._elementRef.nativeElement, 'z-index', (Z_INDEX - index));\r\n    });\r\n\r\n    // set the animation class to each button action\r\n    this._animation.subscribe(animation => {\r\n      const nextAnimationClass = `speed-dial-item-animation-${animation}`;\r\n      this._buttons.forEach(button => {\r\n        if (this._lastAnimationClass) {\r\n          this.renderer.removeClass(button._elementRef.nativeElement, this._lastAnimationClass);\r\n        }\r\n        this.renderer.addClass(button._elementRef.nativeElement, nextAnimationClass);\r\n      });\r\n\r\n      this._lastAnimationClass = nextAnimationClass;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Responsible for change the state of the action buttons to visible\r\n   * \r\n   * @param direction DIRECTION\r\n   */\r\n  show(direction: DIRECTION) {\r\n    switch (this._animation.value) {\r\n      case 'scale': {\r\n        this._buttons.forEach((button, index) => {\r\n          const transition = 3 + (65 * index);\r\n\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', `${transition}ms`);\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', 'scale(1)');\r\n        });\r\n        break;\r\n      }\r\n\r\n      case 'fling': {\r\n        const translateFn = (direction == 'up' || direction == 'down') ? 'translateY' : 'translateX';\r\n        const sign = (direction == 'down' || direction == 'right') ? '-' : '';\r\n\r\n        this._buttons.forEach(button => {\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', '0ms');\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', `${translateFn}(${sign}0)`);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hide all the buttons action\r\n   * \r\n   * @param direction DIRECTION\r\n   */\r\n  hide(direction: DIRECTION) {\r\n    switch (this._animation.value) {\r\n      case 'scale': {\r\n        this._buttons.forEach((button, index) => {\r\n          const transition = 3 - (65 * index);\r\n\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', `${transition}ms`);\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '0');\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', 'scale(0)');\r\n        });\r\n        break;\r\n      }\r\n\r\n      case 'fling': {\r\n        const translateFn = (direction == 'up' || direction == 'down') ? 'translateY' : 'translateX';\r\n        const sign = (direction == 'down' || direction == 'right') ? '-' : '';\r\n\r\n        this._buttons.forEach((button, index) => {\r\n          const transform = (55 * (index + 1) - (index * 5));\r\n\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', '0ms');\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');\r\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', `${translateFn}(${sign}${transform}px)`);\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { AfterViewInit, Component, ContentChild, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { SPIN_ANIMATION } from './animations';\r\nimport { DIRECTION } from './directions';\r\nimport { MccSpeedDialActionsComponent } from './speed-dial-actions.component';\r\n\r\n@Component({\r\n  selector: 'mcc-speed-dial',\r\n  templateUrl: './speed-dial.component.html',\r\n  styleUrls: ['./speed-dial.component.scss'],\r\n  animations: [SPIN_ANIMATION],\r\n})\r\nexport class MccSpeedDialComponent implements AfterViewInit, OnChanges {\r\n  /**\r\n   * Hold speed-dial-actions component inside this component\r\n   */\r\n  @ContentChild(MccSpeedDialActionsComponent) actions: MccSpeedDialActionsComponent;\r\n\r\n  /**\r\n   * Set initial 'open' state\r\n   */\r\n  @Input('open') set isOpen(open: boolean) {\r\n    this._isOpen = coerceBooleanProperty(open);\r\n  }\r\n  get isOpen(): boolean {\r\n    return this._isOpen;\r\n  }\r\n  private _isOpen: boolean = false;\r\n\r\n  /**\r\n   * When enabled, handle open/close state on mouse hover\r\n   */\r\n  @Input('mouseHover') set hover(hover: boolean) {\r\n    this._hover = coerceBooleanProperty(hover);\r\n  }\r\n  private _hover: boolean = false;\r\n\r\n  /**\r\n   * Enable/disable spin animation when button is clicked or hovered\r\n   */\r\n  @Input() set spin(spin: boolean) {\r\n    this._spin = spin;\r\n  }\r\n  get spin() {\r\n    return this._spin;\r\n  }\r\n  private _spin: boolean = true;\r\n\r\n  /**\r\n   * Define the direction of the actions button\r\n   * Directions available are: up | down | left | right\r\n   */\r\n  @Input() set direction(direction: DIRECTION) {\r\n    this._direction = direction;\r\n  }\r\n  get direction(): DIRECTION {\r\n    return this._direction;\r\n  }\r\n  private _direction: DIRECTION = 'up';\r\n\r\n  /**\r\n   * Event emitted when open state change\r\n   */\r\n  @Output() openStateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Call fab speed dial actions functions to change the\r\n   * visibility of the buttons\r\n   */\r\n  private _setActionsState() {\r\n    if (this._isOpen) {\r\n      this.actions.show(this._direction);\r\n    } else {\r\n      this.actions.hide(this._direction);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set initial state to the action buttons inside speed-dial-actions\r\n   */\r\n  ngAfterViewInit() {\r\n    this._setActionsState();\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if ('isOpen' in changes && changes['isOpen'].previousValue !== undefined) {\r\n      this._setActionsState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When mouseHover is enabled and state is closed\r\n   * calls toggle to open the actions\r\n   */\r\n  hoverStart() {\r\n    if (this._hover && !this._isOpen) {\r\n      this.toggle();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When mouseHover is enabled and state is open\r\n   * calls toggle to close the actions\r\n   */\r\n  hoverStop() {\r\n    if (this._hover && this._isOpen) {\r\n      this.toggle();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change the open state\r\n   */\r\n  toggle() {\r\n    this._isOpen = !this._isOpen;\r\n\r\n    this._setActionsState();\r\n\r\n    this.openStateChange.emit(this._isOpen);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MccSpeedDialActionsComponent } from './speed-dial-actions.component';\r\nimport { MccSpeedDialComponent } from './speed-dial.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatButtonModule],\r\n  declarations: [MccSpeedDialComponent, MccSpeedDialActionsComponent],\r\n  exports: [MccSpeedDialComponent, MccSpeedDialActionsComponent],\r\n})\r\nexport class MccSpeedDialModule { }\r\n","// accepted hours\r\nexport type MccTimerPickerHour =\r\n  | '1'\r\n  | '2'\r\n  | '3'\r\n  | '4'\r\n  | '5'\r\n  | '6'\r\n  | '7'\r\n  | '8'\r\n  | '9'\r\n  | '10'\r\n  | '11'\r\n  | '12';\r\n\r\n// accepted minutes\r\nexport type MccTimerPickerMinute =\r\n  | '00'\r\n  | '05'\r\n  | '10'\r\n  | '15'\r\n  | '20'\r\n  | '25'\r\n  | '30'\r\n  | '35'\r\n  | '40'\r\n  | '45'\r\n  | '50'\r\n  | '55';\r\n\r\n/** \r\n * format 12 return hours with 'am' or 'pm'. Examples: \r\n * 12:00 am\r\n * 3:00 pm\r\n * 5:35 pm\r\n * \r\n * format 24 return hours in 24h period. Examples:\r\n * 12:00\r\n * 15:00\r\n * 17:35\r\n */\r\nexport type MccTimerPickerFormat = '12' | '24';\r\n\r\n// period typs\r\nexport type MccTimerPickerPeriod = 'am' | 'pm';\r\n\r\n// timer picker type\r\nexport type MccTimerPickerTimeType = 'hour' | 'min';\r\n\r\n/**\r\n * contants to create timer with HOURS or MINUTES\r\n */\r\nexport const HOURS: string[] = ['12', '11', '1', '10', '2', '9', '3', '8', '4', '7', '5', '6'];\r\nexport const MINUTES: string[] = [\r\n  '00',\r\n  '55',\r\n  '05',\r\n  '50',\r\n  '10',\r\n  '45',\r\n  '15',\r\n  '40',\r\n  '20',\r\n  '35',\r\n  '25',\r\n  '30',\r\n];\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport {\r\n  MccTimerPickerTimeType,\r\n  MccTimerPickerFormat,\r\n  MccTimerPickerHour,\r\n  MccTimerPickerMinute,\r\n  MccTimerPickerPeriod,\r\n  HOURS,\r\n  MINUTES,\r\n} from './timer-picker';\r\n\r\n@Component({\r\n  selector: 'mcc-timer-picker',\r\n  templateUrl: './timer-picker.component.html',\r\n  styleUrls: ['./timer-picker.component.scss'],\r\n  preserveWhitespaces: false,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MccTimerPickerComponent {\r\n  /**\r\n   * Receive selected _hour after confirm\r\n   */\r\n  private _selectedHour: MccTimerPickerHour = '12';\r\n\r\n  /**\r\n   * Receive selected _minute after confirm\r\n   */\r\n  private _selectedMinute: MccTimerPickerMinute = '00';\r\n\r\n  /**\r\n   * Receive selected _period after confirm\r\n   */\r\n  private _selectedPeriod: MccTimerPickerPeriod = 'am';\r\n\r\n  /**\r\n   * Current value (hour/minute) to create the clock\r\n   */\r\n  get clock$(): Observable<string[]> {\r\n    return this._clock.asObservable();\r\n  }\r\n  private _clock: BehaviorSubject<string[]> = new BehaviorSubject(HOURS);\r\n\r\n  /**\r\n   * Type there is in focus (hour/minute)\r\n   */\r\n  get focus(): MccTimerPickerTimeType {\r\n    return this._focus;\r\n  }\r\n  set focus(value: MccTimerPickerTimeType) {\r\n    if (value !== this._focus) {\r\n      this._focus = value;\r\n      this._clock.next(this._focus === 'hour' ? HOURS : MINUTES);\r\n    }\r\n  }\r\n  private _focus: MccTimerPickerTimeType = 'hour';\r\n\r\n  /**\r\n   * State of the overlay\r\n   */\r\n  get isOpen(): boolean {\r\n    return this._isOpen;\r\n  }\r\n  set isOpen(value: boolean) {\r\n    this._isOpen = coerceBooleanProperty(value);\r\n  }\r\n  private _isOpen: boolean;\r\n\r\n  /**\r\n   * Return temporary selected hour (const HOURS)\r\n   */\r\n  get hour(): MccTimerPickerHour {\r\n    return this._hour;\r\n  }\r\n  private _hour: MccTimerPickerHour = '12';\r\n\r\n  /**\r\n   * Return temporary selected minute (const MINUTES)\r\n   */\r\n  get minute(): MccTimerPickerMinute {\r\n    return this._minute;\r\n  }\r\n  private _minute: MccTimerPickerMinute = '00';\r\n\r\n  /**\r\n   * Return temporary selected period (am/pm)\r\n   */\r\n  get period(): MccTimerPickerPeriod {\r\n    return this._period;\r\n  }\r\n  private _period: MccTimerPickerPeriod = 'am';\r\n\r\n  /**\r\n   * Hide Confirm and Cancel buttons\r\n   */\r\n  @Input()\r\n  get hideButtons(): boolean {\r\n    return this._hideButtons;\r\n  }\r\n  set hideButtons(value: boolean) {\r\n    this._hideButtons = coerceBooleanProperty(value);\r\n  }\r\n  private _hideButtons: boolean = false;\r\n\r\n  /**\r\n   * Format of the hour to be emited on confirm\r\n   */\r\n  @Input('mccTimerPickerFormat') format: MccTimerPickerFormat = '12';\r\n\r\n  @Input('mccTimerPickerMin') min: string = '00:00 am';\r\n\r\n  @Input('mccTimerPickerMax') max: string = '12:00 pm';\r\n\r\n  /**\r\n   * Change btnCancel label\r\n   */\r\n  @Input() btnCancel: string = 'Cancel';\r\n\r\n  /**\r\n   * Change btnConfirm label\r\n   */\r\n  @Input() btnConfirm: string = 'Ok';\r\n\r\n  /**\r\n   * Event emited when confirm button is pressed.\r\n   * If buttons are hidden, the event is emited when value is changed\r\n   */\r\n  @Output() selected: EventEmitter<string> = new EventEmitter();\r\n\r\n  /**\r\n   * Origin reference of connected timer picker\r\n   */\r\n  trigger: CdkOverlayOrigin;\r\n\r\n  /**\r\n   * Set to true when timer picker have been connected with another component\r\n   */\r\n  connected: boolean = false;\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Return timer option class to create line between the middle of the clock and\r\n   * the option\r\n   */\r\n  getSelectedClass(): string {\r\n    let name = 'selected-index-';\r\n    if (this.focus === 'hour') {\r\n      name += HOURS.findIndex(h => h === this.hour);\r\n    } else {\r\n      name += MINUTES.findIndex(m => m === this.minute);\r\n    }\r\n\r\n    return name;\r\n  }\r\n\r\n  /**\r\n   * Select option from the clock.\r\n   * @param value MccTimerPickerHour | MccTimerPickerMinute\r\n   */\r\n  select(value: MccTimerPickerHour | MccTimerPickerMinute): void {\r\n    if (this.focus === 'hour') {\r\n      this._hour = <MccTimerPickerHour>value;\r\n      this.focus = 'min';\r\n    } else {\r\n      this._minute = <MccTimerPickerMinute>value;\r\n    }\r\n\r\n    // if buttons are hidden, emit new event when value is changed\r\n    if (this._hideButtons) {\r\n      this.confirmSelectedTime();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns array containing time, hour and period fragments from time string\r\n   * @param time string\r\n   */\r\n  parseTimeInput(time: string): [number, number, string] {\r\n    const parsed = time.split(/\\s|:/).map((fragment, index) => {\r\n      return index === 2 ? fragment : parseInt(fragment, 10);\r\n    });\r\n\r\n    if (parsed.length === 2) {\r\n      // assume we are using 24 hour time format\r\n      const hours = parsed[0] as number;\r\n      if (hours > 11) {\r\n        parsed[0] = hours - 12;\r\n        parsed.push('pm');\r\n      } else {\r\n        parsed.push('am');\r\n      }\r\n    }\r\n\r\n    return parsed as [number, number, string];\r\n  }\r\n\r\n  /**\r\n   * Returns true if option value is not valid\r\n   * @param value MccTimerPickerHour | MccTimerPickerMinute\r\n   */\r\n  isOptionDisabled(value: MccTimerPickerHour | MccTimerPickerMinute): boolean {\r\n\r\n    const [minHour, minMinutes, minPeriod] = this.parseTimeInput(this.min);\r\n    const [maxHour, maxMinutes, maxPeriod] = this.parseTimeInput(this.max);\r\n\r\n    const optionValue = parseInt(value, 10);\r\n    const selectedHour = parseInt(this._hour, 10);\r\n    const selectedPeriod = this._period;\r\n\r\n    if (this.focus === 'hour') {\r\n      if (optionValue < minHour && selectedPeriod === minPeriod) {\r\n        return true;\r\n      } else if (optionValue > maxHour && selectedPeriod === maxPeriod) {\r\n        return true;\r\n      }\r\n    } else {\r\n      if (selectedHour === minHour && selectedPeriod === minPeriod && optionValue < minMinutes) {\r\n        return true;\r\n      } else if (selectedHour === maxHour && selectedPeriod === maxPeriod && optionValue > maxMinutes) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Change period of the clock\r\n   * @param period MccTimerPickerPeriod\r\n   */\r\n  changePeriod(period: MccTimerPickerPeriod): void {\r\n    this._period = period;\r\n    // if buttons are hidden, emit new event when value is changed\r\n    if (this._hideButtons) {\r\n      this.confirmSelectedTime();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update selected color, close the panel and notify the user\r\n   */\r\n  backdropClick(): void {\r\n    this.confirmSelectedTime();\r\n    this._isOpen = false;\r\n  }\r\n\r\n  /**\r\n   * Change values to last confirm select time\r\n   */\r\n  cancelSelection(): void {\r\n    this._hour = this._selectedHour;\r\n    this._minute = this._selectedMinute;\r\n    this._period = this._selectedPeriod;\r\n    this._isOpen = false;\r\n  }\r\n\r\n  /**\r\n   * Set new values of time and emit new event with the formated timer\r\n   */\r\n  confirmSelectedTime(): void {\r\n    this._selectedHour = this.hour;\r\n    this._selectedMinute = this.minute;\r\n    this._selectedPeriod = this.period;\r\n\r\n    // format string to emit selected time\r\n    let formated: string;\r\n    if (this.format === '12') {\r\n      formated = `${this.hour}:${this.minute} ${this.period}`;\r\n    } else {\r\n      let hour: string = this.hour;\r\n      if (this.period === 'pm') {\r\n        hour = `${parseInt(hour) + 12}`;\r\n      }\r\n\r\n      formated = `${hour}:${this.minute}`;\r\n    }\r\n\r\n    this.selected.emit(formated);\r\n\r\n    // only close automatically if button aren't hidden\r\n    if (!this._hideButtons) {\r\n      this._isOpen = false;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  OnDestroy,\r\n  Renderer2,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { MccTimerPickerComponent } from './timer-picker.component';\r\nimport { Subscription, BehaviorSubject } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[mccTimerPickerOrigin], [mcc-timer-picker-origin]',\r\n  exportAs: 'mccTimerPickerOrigin',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MccTimerPickerOriginDirective),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class MccTimerPickerOriginDirective {\r\n  /**\r\n   * Emit changes from the origin\r\n   */\r\n  @Output() change: BehaviorSubject<string> = new BehaviorSubject<string>('');\r\n\r\n  /**\r\n   * Emit changes from the origin\r\n   */\r\n  @Output() hasFocus: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n\r\n  /**\r\n   * Propagate changes to angular\r\n   */\r\n  propagateChanges: (_: any) => {};\r\n\r\n  /**\r\n   * Reference to the element on which the directive is applied.\r\n   */\r\n  constructor(public elementRef: ElementRef, private renderer: Renderer2) {\r\n    // listen focus\r\n    renderer.listen(elementRef.nativeElement, 'focus', () => this.hasFocus.next(true));\r\n  }\r\n\r\n  /**\r\n   * This method will be called by the forms API to write to the view when\r\n   * programmatic (model -> view) changes are requested.\r\n   */\r\n  writeValue(time: string) {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', time);\r\n    this.change.next(time);\r\n    if (this.propagateChanges) {\r\n      this.propagateChanges(time);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method will be called by the time picker\r\n   */\r\n  writeValueFromTimerPicker(time: string) {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', time);\r\n    this.propagateChanges(time);\r\n  }\r\n\r\n  /**\r\n   * This method will be called from origin whe key is up\r\n   */\r\n  writeValueFromKeyup(time: string) {\r\n    this.change.next(time);\r\n    this.propagateChanges(time);\r\n  }\r\n\r\n  /**\r\n   * This is called by the forms API on initialization so it can update the\r\n   * form model when values propagate from the view (view -> model).\r\n   * @param fn any\r\n   */\r\n  registerOnChange(fn: any): void {\r\n    this.propagateChanges = fn;\r\n  }\r\n\r\n  /**\r\n   * This is called by the forms API on initialization so it can update the form model on blur\r\n   * @param fn any\r\n   */\r\n  registerOnTouched(fn: any): void { }\r\n\r\n  /**\r\n   * called by the forms API when the control status changes to or from \"DISABLED\"\r\n   * @param isDisabled boolean\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[mccConnectedTimerPicker], [mcc-connected-timer-picker]',\r\n  exportAs: 'mccConnectedTimerPicker',\r\n})\r\nexport class MccConnectedTimerPickerDirective implements AfterViewInit, OnDestroy {\r\n  /**\r\n   * origin of the connected timer picker\r\n   */\r\n  @Input('mccConnectedTimerPickerOrigin') origin: MccTimerPickerOriginDirective;\r\n\r\n  /**\r\n   * subscription of the origin focus observable\r\n   */\r\n  private _originFocus: Subscription;\r\n\r\n  /**\r\n   * subscription of the timer picker selected change\r\n   */\r\n  private _timerPickerSub: Subscription;\r\n\r\n  constructor(\r\n    private timerPicker: MccTimerPickerComponent,\r\n    public changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    this.timerPicker.connected = true;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!this._timerPickerSub) {\r\n      this.timerPicker.trigger = this.origin;\r\n      this._attachTimerPicker();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._originFocus && !this._originFocus.closed) {\r\n      this._originFocus.unsubscribe();\r\n    }\r\n    if (this._timerPickerSub && !this._timerPickerSub.closed) {\r\n      this._timerPickerSub.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attach the timer picker to origin element (input)\r\n   */\r\n  private _attachTimerPicker(): void {\r\n    this._originFocus = this.origin.hasFocus.subscribe(focused => {\r\n      this.timerPicker.focus = 'hour';\r\n      this.timerPicker.isOpen = focused;\r\n      this.changeDetectorRef.detectChanges();\r\n    });\r\n\r\n    this._timerPickerSub = this.timerPicker.selected.subscribe(value =>\r\n      this.origin.writeValueFromTimerPicker(value)\r\n    );\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\nimport { MccTimerPickerComponent } from './timer-picker.component';\r\nimport {\r\n  MccTimerPickerOriginDirective,\r\n  MccConnectedTimerPickerDirective,\r\n} from './timer-picker.directives';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, PortalModule, OverlayModule, MatButtonModule],\r\n  declarations: [\r\n    MccTimerPickerComponent,\r\n    MccTimerPickerOriginDirective,\r\n    MccConnectedTimerPickerDirective,\r\n  ],\r\n  exports: [\r\n    MccTimerPickerComponent,\r\n    MccTimerPickerOriginDirective,\r\n    MccConnectedTimerPickerDirective,\r\n  ],\r\n})\r\nexport class MccTimerPickerModule { }\r\n"]}